From 77cad70b335e91164df67c623512e9266c66a701 Mon Sep 17 00:00:00 2001
From: Dusty Little <dlittle@toyatech.net>
Date: Wed, 3 Oct 2012 12:22:12 -0500
Subject: [PATCH 1/2] Allow the 'use' and 'active_check_enabled' attributes to
 be set via extra_service_conf for legacy checks

---
 modules/check_mk.py | 31 +++++++++++++++++++++++++++----
 1 file changed, 27 insertions(+), 4 deletions(-)

diff --git a/modules/check_mk.py b/modules/check_mk.py
index 4491a82..fa14550 100755
--- a/modules/check_mk.py
+++ b/modules/check_mk.py
@@ -1802,20 +1802,43 @@ define servicedependency {
         else:
             used_descriptions[description] = ( "legacy(" + command + ")", description )
 
-        extraconf = extra_service_conf_of(hostname, description)
+        #extraconf = extra_service_conf_of(hostname, description)
+        # CHANGED: get extra configuration as a dictionary
+        extraconfdict = extra_service_conf_of_dict(hostname, description)
+
+        # The 'use' key is special because we have a default value for it.
+        if extraconfdict.has_key('use'):
+            use_template = extraconfdict['use']
+            del extraconfdict['use']
+        else:
+            use_template = 'check_mk_default'
+
+        # The 'active_checks_enabled' key is special because we have a default value for it.
+        if extraconfdict.has_key('active_checks_enabled'):
+            active_checks_enabled = extraconfdict['active_checks_enabled']
+            del extraconfdict['active_checks_enabled']
+        else:
+            active_checks_enabled = '1'
+
+        # If we have performance data, then we should ensure we use the performance data template.
         if has_perfdata:
             template = "check_mk_perf,"
         else:
             template = ""
+
+        # Here we generate extraconf based on the dictionary.
+        fmt = " %-29s %s\n"
+        extraconf = "".join(["  %-29s %s\n" % (x, extraconfdict[x]) for x in extraconfdict])
+
         outfile.write("""
 define service {
-  use\t\t\t\t%scheck_mk_default
+  use\t\t\t\t%s%s
   host_name\t\t\t%s
   service_description\t\t%s
   check_command\t\t\t%s
-  active_checks_enabled\t\t1
+  active_checks_enabled\t\t%s
 %s}
-""" % (template, hostname, description, simulate_command(command), extraconf))
+""" % (template, use_template, hostname, description, simulate_command(command), active_checks_enabled, extraconf))
 
     # legacy checks via active_checks
     actchecks = []
-- 
1.7.11.2


From 038f548ea51c6b80e238e7d66dfb8abf0b3f2436 Mon Sep 17 00:00:00 2001
From: Dusty Little <dlittle@toyatech.net>
Date: Wed, 3 Oct 2012 13:28:02 -0500
Subject: [PATCH 2/2] Add extra_service_conf_of_dict and extra_conf_of_dict
 functions

---
 modules/check_mk.py | 31 +++++++++++++++++++++++++++++++
 1 file changed, 31 insertions(+)

diff --git a/modules/check_mk.py b/modules/check_mk.py
index fa14550..f78972a 100755
--- a/modules/check_mk.py
+++ b/modules/check_mk.py
@@ -1217,6 +1217,26 @@ def extra_service_conf_of(hostname, description):
     conf += extra_conf_of(extra_service_conf, hostname, description)
     return conf
 
+# Collect all extra configuration data for a service using dict
+def extra_service_conf_of_dict(hostname, description):
+    global contactgroups_to_define
+    global servicegroups_to_define
+    conf = {}
+
+    # Contact groups
+    sercgr = service_extra_conf(hostname, description, service_contactgroups)
+    contactgroups_to_define.update(sercgr)
+    if len(sercgr) > 0:
+        conf["contact_groups"] = ",".join(sercgr)
+
+    sergr = service_extra_conf(hostname, description, service_groups)
+    if len(sergr) > 0:
+        conf["service_groups"] = ",".join(sergr)
+        if define_servicegroups:
+            servicegroups_to_define.update(sergr)
+    conf.update(extra_conf_of_dict(extra_service_conf, hostname, description))
+    return conf
+
 def extra_summary_service_conf_of(hostname, description):
     return extra_conf_of(extra_summary_service_conf, hostname, description)
 
@@ -1232,6 +1252,17 @@ def extra_conf_of(confdict, hostname, service):
             result += format % (key, values[0])
     return result
 
+def extra_conf_of_dict(confdict, hostname, service):
+    result = {}
+    for key, conflist in confdict.items():
+        if service != None:
+            values = service_extra_conf(hostname, service, conflist)
+        else:
+            values = host_extra_conf(hostname, conflist)
+        if len(values) > 0:
+            result[key] = values[0]
+    return result
+
 def check_icmp_arguments(hostname):
     values = host_extra_conf(hostname, ping_levels)
     levels = {}
-- 
1.7.11.2

